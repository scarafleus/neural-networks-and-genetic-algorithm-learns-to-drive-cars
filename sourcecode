/*
Neural Network learns to race cars, yay
It's working now after 1.5 days, amazing! This is my first genetic algrithm and my firsst neural network project and I'm very happ with how it turned out.
Hannes Richter 2018

VIDEO: https://www.youtube.com/watch?v=0PtntoDnZhk

*/
int ind = 0;
PFont font;

int size = 50;
int amount = 23;
int Generation = 1;
float highScore = 0;
FloatList hScores;
FloatList averages;
float average = 0;

float start = 0;
float time = 0;

NeuralNetwork[] ghost = new NeuralNetwork[size];
Car[] cars = new Car[size];
NeuralNetwork[] nets = new NeuralNetwork[size];
Point[] points = new Point[amount];
Evolution e;

void setup() {
  hScores = new FloatList();
  averages = new FloatList();
  averages.append(0);
  hScores.append(0);
  font = createFont("Courier New Bold", 24);
  textFont(font);
  textAlign(LEFT, CENTER);
  ellipseMode(CENTER);
  stroke(255);
  e = new Evolution();
  
  //initialize the neural networks
  for (int i = 0; i < size; i++) {
    nets[i] = new NeuralNetwork();
    nets[i].initialize();
  }
  
  //initialize the points
  for (int i = 0; i < amount; i++) {
    points[i] = new Point(random(1000), random(1000));
  }
  
  //initialize the car(s)
  for (int i = 0; i < size; i++) {
    cars[i] = new Car(500, 500, i);
  }
  
  //initialize the ghost cars
  for (int i = 0; i < size; i++) {
    ghost[i] = new NeuralNetwork();
  }
  size(1800, 1000);
}

void draw() {
  background(100);
  
  manageTime();
  
  for (int i = 0; i < size; i++) {
    cars[ind].shown();
    cars[i].show();
    cars[i].update();
    cars[i].collide();
  }
  
  for (int i = 0; i < amount; i++) {
    points[i].show();
    points[i].update();
  }
  
  for (int i = 0; i < size; i++) {
    nets[i].feedForward(cars[i].detect());
    cars[i].drive(nets[i].outputs);
  }
  
  fill(0);
  rectMode(LEFT);
  rect(1000, 0, width, height);
  
  drawNet(ind);
  cars[0].detect();
  
  scoreTabel();
  
  for (int i = 0; i < 2; i++) {
    for (int k = 0; k < 4; k++) {
      drawNets(i * 200 + 1400, k * 250, k * 2 + i);
    }
  }
}

void mouseDragged() {
  if (mouseButton == LEFT) {
    cars[0].turn(-1);
  }
  if (mouseButton == RIGHT) {
    cars[0].turn(1);
  }
}


void keyPressed() {
  if (keyCode == UP) {
    cars[0].applyForce(1);
  } else if (keyCode == DOWN) {
    cars[0].applyForce(-1);
  } else if (keyCode == 'Q' || keyCode == 'q') {
    ind += 1;
    if (ind == size) {
      ind = 0;
    }
  } else if (keyCode == 'E' || keyCode == 'e') {
    ind -= 1;
    if (ind == -1) {
      ind = size - 1;
    }
  } else if (keyCode == 'W' || keyCode == 'w') {
    for (int i = 0; i < nets[ind].weights0[0].length; i++) {
      nets[ind].weights0[0][i] = 100;
    }
  } else if (keyCode == ' ') {
    saveNet(nets[ind]);
  }
}

void manageTime() {
  time = millis();
  if (time - start > 15000) {
    start = time;
    Generation++;
    e.createGenePool();
    for (int i = 0; i < size; i++) {
      cars[i].dead = false;
      cars[i].pos.set(500, 500);
      cars[i].vel.set(0.1, 0);
      cars[i].score = 0;
    }
    e.mixItUp();
  }
}

float sigmoid(float x, boolean deriv) {
  if (deriv) {
    x = x * (1 - x);
  } else {
    x = 1 / (1 + exp(-x));
  }
  return(x);
}

void drawNet(int a) {
  /*
  This is the function that draws the neural network
  as you can see the strength of the lines is proportinal to the weight, and gets colorcoded
  the neurons brightness is equivelant to their value between 0 and 1 at any given time
  */
  NeuralNetwork n = nets[a];
  fill(255);
  //draw neurons
  for (int i = 0; i < 12; i++) {
    if (i < 3) {
      fill(map(n.input[i], 0, 100, 0, 255));
      ellipse(1050, 150 + 100 * i, 50, 50);
    } else if (i < 8) {
      fill(map(n.layer1[i - 3], 0, 1, 0, 255));
      ellipse(1200, 50 + 100 * (i - 3), 50, 50);
    } else {
      fill(map(n.outputs[i - 8], 0, 1, 0, 255));
      ellipse(1350, 100 + 100 * (i - 8), 50, 50);
    }
  }
  
  //draw weights
  for (int i = 0; i < 3; i++) {
    for (int j = 0; j < 5; j++) {
      strokeWeight(abs(n.weights0[i][j]) * 6);
      stroke(color(map(n.weights0[i][j],-1,1,0,255),0,map(n.weights0[i][j],-1,1,255,0)));
      line(1050, 150 + 100 * i, 1200, 50 + 100 * j);
    }
  }
  
  for (int i = 0; i < 5; i++) {
    for (int j = 0; j < 4; j++) {
      strokeWeight(abs(n.weights1[i][j]) * 6);
      stroke(color(map(n.weights1[i][j],-1,1,0,255),0,map(n.weights1[i][j],-1,1,255,0)));
      line(1200, 50 + 100 * i, 1350, 100 + 100 * j);
    }
  }
  fill(255);
  stroke(255);
  strokeWeight(2);
  textAlign(LEFT, CENTER);
  text("Population size: " + size, 1050, 510);
  text("Average: " + average, 1050, 540);
  text("Highscore: " + highScore, 1050, 570);
  text("Car number: " + a, 1050, 600);
  text("Score: " + cars[a].score, 1050, 630);
  text("Velocity: " + floor(cars[a].vel.mag() * 10), 1050, 660);
  text("Time: " + (time/1000) % 15, 1050, 690);
  text("Generation: " + Generation, 1050, 720);
}

void scoreTabel() {
  fill(255);
  rectMode(LEFT);
  rect(1000, 800, 1400, 1000);
  stroke(255, 0, 150);
  beginShape();
  if (hScores.size() > 1) {
    for (int i = 0; i < hScores.size(); i++) {
      vertex(400 * i / (hScores.size() - 1) + 1000, 1000 - 200 * (hScores.get(i) / highScore));
    }
  }
  endShape();
  stroke(0);
  beginShape();
  if (averages.size() > 1) {
    for (int i = 0; i < averages.size(); i++) {
      vertex(400 * i / (hScores.size() - 1) + 1000, 1000 - 200 * (averages.get(i) / highScore));
    }
  }
  endShape();
  stroke(255);
}

void saveNet(NeuralNetwork n) {
  background(255);
  saveFrame("network.ong");
  loadPixels();
  for (int i = 0; i < 3; i++)
    for (int j = 0; j < 5; j++) {
      if (n.weights0[i][j] > 0) {
        pixels[i+j*5] = color(0, 0, n.weights0[i][j] * 255/2);
      } else {
        pixels[i+j*5] = color(n.weights0[i][j] * 255/2, 0, 0);
      }
      if (n.biases0[i][j] > 0) {
        pixels[i+j*5+10] = color(0, 0, n.biases0[i][j] * 255/2);
      } else {
        pixels[i+j*5+10] = color(n.biases0[i][j] * 255/2, 0, 0);
      }
    }
  for (int i = 0; i < 5; i++)
    for (int j = 0; j < 4; j++) {
      pixels[j + i*5 + 20] = color(n.weights1[i][j] * 255/2, 0, 0);
      pixels[j + i*5 + 30] = color(n.biases1[i][j] * 255/2, 0, 0);
    }
  updatePixels();
}

class Car {
  
  PVector pos, vel;
  float acc = 0;
  float score = 0;
  float size = 30;
  boolean dead = false;
  boolean shown = false;
  int inde = 0;
  
  Car(int x, int y, int i) {
    vel = new PVector(0,0);
    pos = new PVector(x,y);
    inde = i;
  }
  
  void show() {
    fill(100, 100, 255);
    if (shown) {
      fill(255, 150, 150);
    }
    pushMatrix();
    translate(pos.x, pos.y);
    rotate(vel.heading() + HALF_PI);
    rectMode(CENTER);
    rect(0,0,size, 1.5*size);
    fill(0, 255, 100);
    ellipse(-size / 2, 0, 10, 10);
    ellipse(size / 2, 0, 10, 10);
    ellipse(0, -size / 2, 10, 10);
    fill(0);
    textAlign(CENTER, CENTER);
    text(inde, 0, 0);
    popMatrix();
    shown = false;
  }
  
  void shown() {
    shown = true;
  }
  
  void update() {
    if (!dead) {
      score += vel.mag();
      if (vel.mag() == 0) {
        vel.set(0.01, 0);
      }
      float a = vel.mag();
      vel.normalize();
      vel.mult(a + acc);
      vel.limit(5);
      pos.add(vel);
      acc = 0;
    }
  }
  
  void applyForce(float force) {
    acc += force;
  }
  
  void turn(float a) {
    if (!dead) {
      vel.rotate(radians(a));
    }
  }
  
  float[] detect() {
    //first index speed, second and third are the distance between the closest point and two points on the car
    float[] vals = new float[3];
    vals[0] = vel.mag();
    //loop through all the obstacles and
    float rec = 1000;
    float xx = 0, yy = 0; //position of the closest point (x and y coordinate)
    for (int i = 0; i < amount; i++) {
      if (dist(pos.x, pos.y, points[i].pos.x, points[i].pos.y) < rec) {
        rec = dist(pos.x, pos.y, points[i].pos.x, points[i].pos.y);
        xx = points[i].pos.x;
        yy = points[i].pos.y;
      }
    }
    if (pos.x < rec) {
      xx = 0;
      yy = pos.y;
    } else if (1000 - pos.x < rec) {
      xx = 1000;
      yy = pos.y;
    } else if (pos.y < rec) {
      xx = pos.x;
      yy = 0;
    } else if (1000 - pos.y < rec) {
      xx = pos.x;
      yy = height;
    }
    //figure out the distance between 2 points on the car and the nearest circle
    PVector temp = new PVector(vel.x, vel.y);
    temp.normalize();
    temp.mult(size / 2);
    line(xx, yy, pos.x + temp.y, pos.y - temp.x);
    line(xx, yy, pos.x - temp.y, pos.y + temp.x);
    line(xx, yy, pos.x + temp.x, pos.y + temp.y);
    vals[1] = dist(xx, yy, pos.x + temp.y, pos.y - temp.x);
    vals[2] = dist(xx, yy, pos.x - temp.y, pos.y + temp.x);
    vals[0] = dist(xx, yy, pos.x + temp.x, pos.y + temp.y);
    return vals;
  }
  
  void drive(float[] a) {
    applyForce(a[0]);
    applyForce(-a[1]);
    turn(a[2]);
    turn(-a[3]);
  }
  
  void collide() {
    if (pos.x < 0 || pos.x > 1000 || pos.y < 0 || pos.y > height) {
      die();
    } else {
      for (int i = 0; i < amount; i++) {
        if (dist(pos.x, pos.y, points[i].pos.x, points[i].pos.y) < 40) {
          die();
        }
      }
    }
  }
    
  void die() {
    if (!dead) {
      dead = true;
      score *= 0.6;
    }
  }
}

class NeuralNetwork {
  /*
  neural network with 3 inputs (current speed, distance left, distance right) one 5 neuron hidden layer and 4 outputs
  */
  
  float mutationRate = 0.1;
  
  //weights and biases and layers
  float[][] weights0 = new float[3][5];
  float[][] weights1 = new float[5][4];
  float[][] biases0 = new float[3][5];
  float[][] biases1 = new float[5][4];
  float[] outputs = new float[4];
  float[] layer1 = new float[5];
  float[] input = new float[3];
  
  NeuralNetwork() {}
  
  float[] feedForward(float[] inputs) {
    input = inputs;

    //initialize values for hidden layer neurons as 0
    for (int i = 0; i < 5; i++) {
      layer1[i] = 0;
    }
    //add the biases and inputs multiplied by the weights
    for (int i = 0; i < 5; i++) {
      for (int j = 0; j < 3; j++) {
        layer1[i] += inputs[j] * weights0[j][i] + biases0[j][i];
      }
    }
    //apply the sigmoid function
    for (int i = 0; i < 5; i++) {
      layer1[i] = sigmoid(layer1[i], false);
    }
    
    //initialize values for output layer neurons as 0
    for (int i = 0; i < 4; i++) {
      outputs[i] = 0;
    }
    //add the biases and inputs multiplied by the weights
    for (int i = 0; i < 4; i++) {
      for (int j = 0; j < 5; j++) {
        outputs[i] += layer1[j] * weights1[j][i] + biases1[j][i];
      }
    }
    //apply the sigmoid function
    for (int i = 0; i < 4; i++) {
      outputs[i] = sigmoid(outputs[i], false);
    }
    
    return outputs;
  }
  
  void initialize() {
    //randomly initialue weights and biases with values between -1 and 1
    for (int i = 0; i < 3; i++)
      for (int j = 0; j < 5; j++) {
        weights0[i][j] = random(-1,1);
        biases0[i][j] = random(-1,1);
      }
    
    for (int i = 0; i < 5; i++)
      for (int j = 0; j < 4; j++) {
        weights1[i][j] = random(-1,1);
        biases1[i][j] = random(-1,1);
      }
  }
  
  void mutate() {
    for (int i = 0; i < 3; i++)
      for (int j = 0; j < 5; j++) {
        weights0[i][j] = random(-2,2);
        biases0[i][j] = random(-2,2);
      }
      
    for (int i = 0; i < 5; i++)
      for (int j = 0; j < 4; j++) {
        weights1[i][j] = random(-2,2);
        biases1[i][j] = random(-2,2);
      }
  }
}

class Point {
  
  PVector pos;
  
  Point(float x, float y) {
    pos = new PVector(x, y);
  }
  
  void show() {
    fill(255, 0, 120);
    pos.x += random(-1, 1);
    pos.y += random(-1, 1);
    ellipseMode(CENTER);
    ellipse(pos.x, pos.y, 40, 40);
  }
  
  void update() {
    if (pos.x > 350 && pos.x < 750 && pos.y > 350 && pos.y < 750) {
      pos.set(random(1000), random(1000));
    }
  }
}

class Evolution {
  
  float avage = 0;
  float[] scores = new float[size];
  float[] aScore = new float[size];
  IntList pool = new IntList();
  float mutationRate = 0.1;
  int best = 0;
  
  Evolution() {}
  
  void createGenePool() {
    for (int i = 0; i < size; i++) {
      avage += cars[i].score;
    }
    avage /= size;
    averages.append(avage);
    pool = new IntList();
    float rec = 0;
    //figure out which score is the highest
    for (int i = 0; i < size; i++) {
      if (cars[i].score > rec) {
        rec = cars[i].score;
        best = i; //index of the champion, he will be guaranteed to reproduce a defined amount of times
      }
    }
    hScores.append(rec);
    if (rec > highScore) {
      highScore = rec;
    }
    //create an array with relative score from 0 to 1
    for (int i = 0; i < size; i++) {
      scores[i] = cars[i].score / rec;
    }
    //add the indecies to the array relative to their score
    for (int i = 0; i < size; i++) {
      for (int j = 0; j < 10; j++) {
        if (random(1) < scores[i]) {
          pool.append(i);
        }
      }
    }
    //shuffle the array and then renmove any value occuring more than 3 times, then take the first 10 values
    pool.shuffle();
    for (int i = 0; i < size; i++) {
      int c = 0;
      for (int j = 0; j < pool.size(); j++) {
        if (pool.get(j) == i) {
          c++;
          if (c > 2 && pool.size() > 10) {
            pool.remove(j);
          }
        }
      }
    }
    //create an array with 10 stores  and add the neural networks to it by picking indiecies from pool randomly
    Store[] st = new Store[size];
    for (int i = 0; i < size; i++) {
      if (i < 2) {
        st[i] = new Store();
        st[i].w0 = nets[best].weights0;
        st[i].w1 = nets[best].weights1;
        st[i].b0 = nets[best].biases0;
        st[i].b1 = nets[best].biases1;
      } else {
        st[i] = new Store();
        st[i].w0 = nets[pool.get(i)].weights0;
        st[i].w1 = nets[pool.get(i)].weights1;
        st[i].b0 = nets[pool.get(i)].biases0;
        st[i].b1 = nets[pool.get(i)].biases1;
      }
    }
    
    for (int i = 0; i < size; i++) {
      if (random(1) > mutationRate) {
        nets[i].weights0 = st[i].w0;
      } else {
        float[][] temp = {{random(-2, 2), random(-2, 2), random(-2, 2), random(-2, 2), random(-2, 2)}, {random(-2, 2), random(-2, 2), random(-2, 2), random(-2, 2), random(-2, 2)},{random(-2, 2), random(-2, 2), random(-2, 2), random(-2, 2), random(-2, 2)}};
        nets[i].weights0 = temp;
      }
      if (random(1) > mutationRate) {
        nets[i].weights1 = st[i].w1;
      } else {
        float[][] temp = {{random(-2, 2), random(-2, 2), random(-2, 2), random(-2, 2)}, {random(-2, 2), random(-2, 2), random(-2, 2), random(-2, 2)}, {random(-2, 2), random(-2, 2), random(-2, 2), random(-2, 2)}, {random(-2, 2), random(-2, 2), random(-2, 2), random(-2, 2)}, {random(-2, 2), random(-2, 2), random(-2, 2), random(-2, 2)}, };
        nets[i].weights1 = temp;
      }
      if (random(1) > mutationRate) {
        nets[i].biases0 = st[i].b0;
      } else {
        float[][] temp = {{random(-2, 2), random(-2, 2), random(-2, 2), random(-2, 2), random(-2, 2)}, {random(-2, 2), random(-2, 2), random(-2, 2), random(-2, 2), random(-2, 2)},{random(-2, 2), random(-2, 2), random(-2, 2), random(-2, 2), random(-2, 2)}};
        nets[i].biases0 = temp;
      }
      if (random(1) > mutationRate) {
        nets[i].biases1 = st[i].b1;
      } else {
        float[][] temp = {{random(-2, 2), random(-2, 2), random(-2, 2), random(-2, 2)}, {random(-2, 2), random(-2, 2), random(-2, 2), random(-2, 2)}, {random(-2, 2), random(-2, 2), random(-2, 2), random(-2, 2)}, {random(-2, 2), random(-2, 2), random(-2, 2), random(-2, 2)}, {random(-2, 2), random(-2, 2), random(-2, 2), random(-2, 2)}, };
        nets[i].biases1 = temp;
      }
    }
  }
  void mixItUp() {
    //see if none of the past 10 values have been higher or lower then the avergae by half, if so, add some new stuff
    float sum = 0;
    for (int i = 0; i < hScores.size(); i++) {
      sum += hScores.get(i);
    }
    float avg = sum / hScores.size();
    average = avg;
    boolean g = true;
    if (Generation > 10) {
      for (int i = hScores.size() -10; i < hScores.size(); i++) {
        if (abs(hScores.get(i) - avg) > avg * 0.5) {
          g = false;
        }
      }
      if (g) {
        int c = floor(random(size));
        nets[c].initialize();
        println("MIXING IT UP OVER AT: " + c);
        mutationRate = 0.3;
      } else {
        mutationRate = 0.1;
      }
    }
  }
}

class Store {
  Store() {}
  float[][] w0 = new float[3][5];
  float[][] w1 = new float[5][4];
  float[][] b0 = new float[3][5];
  float[][] b1 = new float[5][4];
}

void drawNets(float x, float y, int a) {
  pushMatrix();
  //space : 200 x 250
  translate(x, y);
  NeuralNetwork n = nets[a];
  fill(255);
  //draw neurons
  for (int i = 0; i < 12; i++) {
    if (i < 3) {
      fill(map(n.input[i], 0, 300, 0, 255));
      ellipse(50, 75 + 50 * i, 30, 30);
    } else if (i < 8) {
      fill(map(n.layer1[i - 3], 0, 1, 0, 255));
      ellipse(100, 25 + 50 * (i - 3), 30, 30);
    } else {
      fill(map(n.outputs[i - 8], 0, 1, 0, 255));
      ellipse(150, 50 + 50 * (i - 8), 30, 30);
    }
  }
  
  //draw weights
  for (int i = 0; i < 3; i++) {
    for (int j = 0; j < 5; j++) {
      strokeWeight(abs(n.weights0[i][j]) * 2);
      stroke(color(map(n.weights0[i][j],-1,1,0,255),0,map(n.weights0[i][j],-1,1,255,0)));
      line(50, 75 + 50 * i, 100, 25 + 50 * j);
    }
  }
  
  for (int i = 0; i < 5; i++) {
    for (int j = 0; j < 4; j++) {
      strokeWeight(abs(n.weights1[i][j]) * 2);
      stroke(color(map(n.weights1[i][j],-1,1,0,255),0,map(n.weights1[i][j],-1,1,255,0)));
      line(100, 25 + 50 * i, 150, 50 + 50 * j);
    }
  }
  fill(255);
  textAlign(CENTER, CENTER);
  text(a, 50, 225);
  stroke(255);
  strokeWeight(2);
  popMatrix();
}
